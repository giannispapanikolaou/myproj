{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Askisi 2  R-K"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "100.0\n",
      "231.9693166840739\n",
      "450.85306037928376\n",
      "690.5678577030158\n",
      "858.4864497582141\n",
      "942.8256185740149\n",
      "978.178051236962\n",
      "991.8598678672114\n",
      "996.9899242601384\n",
      "998.8905440229228\n",
      "999.5915675173918\n",
      "999.8497072841834\n",
      "999.94470514651\n",
      "999.979657449165\n",
      "999.9925162975342\n",
      "999.997246886695\n",
      "999.9989871844534\n",
      "999.9996274057441\n",
      "999.9998629302011\n",
      "999.9999495748345\n",
      "999.9999814496177\n"
     ]
    }
   ],
   "source": [
    "#analutiki lisi\n",
    "import math\n",
    "import numpy as np\n",
    "h=0.1\n",
    "N= int(2/h)\n",
    "t=np.linspace(0, 2, N+1)\n",
    "y=np.zeros(N+1)\n",
    "for i in range(0, N+1):\n",
    "    y[i]=1000/(9*math.exp(-10*t[i])+ 1)\n",
    "    print (y[i])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "y0 = 100\n",
      "for n= 0 R-K solution is: y 1 is: 225.56965907049414\n",
      "for n= 1 R-K solution is: y 2 is: 436.86090195146363\n",
      "for n= 2 R-K solution is: y 3 is: 678.1779902083624\n",
      "for n= 3 R-K solution is: y 4 is: 852.2420290024303\n",
      "for n= 4 R-K solution is: y 5 is: 939.9590411313596\n",
      "for n= 5 R-K solution is: y 6 is: 976.7973368654568\n",
      "for n= 6 R-K solution is: y 7 is: 991.2008986313806\n",
      "for n= 7 R-K solution is: y 8 is: 996.6864767076672\n",
      "for n= 8 R-K solution is: y 9 is: 998.7554765174268\n",
      "for n= 9 R-K solution is: y 10 is: 999.533028998573\n",
      "for n= 10 R-K solution is: y 11 is: 999.8248472370532\n",
      "for n= 11 R-K solution is: y 12 is: 999.93431228007\n",
      "for n= 12 R-K solution is: y 13 is: 999.9753663408715\n",
      "for n= 13 R-K solution is: y 14 is: 999.9907622703663\n",
      "for n= 14 R-K solution is: y 15 is: 999.9965358362757\n",
      "for n= 15 R-K solution is: y 16 is: 999.9987009364784\n",
      "for n= 16 R-K solution is: y 17 is: 999.9995128508806\n",
      "for n= 17 R-K solution is: y 18 is: 999.9998173190382\n",
      "for n= 18 R-K solution is: y 19 is: 999.9999314946334\n",
      "for n= 19 R-K solution is: y 20 is: 999.9999743104867\n"
     ]
    }
   ],
   "source": [
    "yrk=np.zeros(N+1)\n",
    "yrk[0]=100\n",
    "#apo 0 mexri kai N\n",
    "print(\"y0 = 100\")\n",
    "for n in range(0,N):\n",
    "    k1= 10*yrk[n]*(1- (yrk[n]/1000))\n",
    "    k2= 10*(yrk[n]+ h*(k1/2))*(1 - ((yrk[n] + h*(k1/2))/1000))\n",
    "    k3= 10*(yrk[n]+ h*(k1/2))*(1 - ((yrk[n] + h*(k2/2))/1000))\n",
    "    k4= 10*(yrk[n]+ h*k3)*(1 - ((yrk[n] + h*k3)/1000))\n",
    "    yrk[n+1]= yrk[n]+ (1/6)*h*(k1+2*k2+2*k3+k4)\n",
    "    print(\"for n=\", n , \"RK solution is: y\",n+1, \"is:\" , yrk[n+1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Function to plot   \n",
    "from matplotlib import pyplot as plt\n",
    "plt.plot(yrk,t, label ='RK4') \n",
    "plt.plot(y,t, label ='analytical') \n",
    "# Function add a legend   \n",
    "plt.legend() \n",
    "# function to show the plot \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Βλέπουμε ότι η RK έκανε πολύ καλή δουλειά. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Σύγκριση της R-K με την Euler:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "y0 = 100\n",
      "for n= 0 euler solution is: y 1 is: 190.0\n",
      "for n= 1 euler solution is: y 2 is: 343.9\n",
      "for n= 2 euler solution is: y 3 is: 569.53279\n",
      "for n= 3 euler solution is: y 4 is: 814.6979811148159\n",
      "for n= 4 euler solution is: y 5 is: 965.663161797075\n",
      "for n= 5 euler solution is: y 6 is: 998.8209815422261\n",
      "for n= 6 euler solution is: y 7 is: 999.9986099154762\n",
      "for n= 7 euler solution is: y 8 is: 999.9999999980677\n",
      "for n= 8 euler solution is: y 9 is: 1000.0\n",
      "for n= 9 euler solution is: y 10 is: 1000.0\n",
      "for n= 10 euler solution is: y 11 is: 1000.0\n",
      "for n= 11 euler solution is: y 12 is: 1000.0\n",
      "for n= 12 euler solution is: y 13 is: 1000.0\n",
      "for n= 13 euler solution is: y 14 is: 1000.0\n",
      "for n= 14 euler solution is: y 15 is: 1000.0\n",
      "for n= 15 euler solution is: y 16 is: 1000.0\n",
      "for n= 16 euler solution is: y 17 is: 1000.0\n",
      "for n= 17 euler solution is: y 18 is: 1000.0\n",
      "for n= 18 euler solution is: y 19 is: 1000.0\n",
      "for n= 19 euler solution is: y 20 is: 1000.0\n"
     ]
    }
   ],
   "source": [
    "#eulers method/ askisi2 fyl 3.\n",
    "yeuler=np.zeros(N+1)\n",
    "yeuler[0]=100\n",
    "#apo 0 mexri kai N\n",
    "print(\"y0 = 100\")\n",
    "for n in range(0,N):\n",
    "    yeuler[n+1]= yeuler[n]+ h * 10*yeuler[n]*(1- (yeuler[n]/1000))\n",
    "    print(\"for n=\", n , \"euler solution is: y\",n+1, \"is:\" , yeuler[n+1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Plot όλες μαζί."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Function to plot   \n",
    "from matplotlib import pyplot as plt\n",
    "plt.plot(yeuler,t, label ='eulers') \n",
    "plt.plot(y,t, label ='analytical') \n",
    "plt.plot(yeuler,t, label ='eulers')\n",
    "# Function add a legend   \n",
    "plt.legend() \n",
    "# function to show the plot \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Παρατηρούμε ότι η R-K τα πήγε καλύτερα. Αυτό ήταν αναμενόμενο καθώς η euler συνήθως δίνει χειρότερα αποτελέσματα από την R-K. Εάν το τρέξουμε με μέγεθος βήματος μεγαλύτερο θα δούμε ότι τα πηγαίνει ακόμη χειρότερα, καθώς σαν μέθοδος δουλεύει καλύτερα με μικρά βήματα."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
